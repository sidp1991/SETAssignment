# -*- coding: utf-8 -*-
"""SET_ASSIGN_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PFdjXmhainDwXrU3sH-Hz6V32FFtBeLD
"""

# PRN : 2019BTECS00029

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn import datasets,linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import  mean_squared_error


# importing database
myDataset = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00374/energydata_complete.csv",
sep= ',', header = None)
# print(myDataset)

# myDataset_X = myDataset.data[:,np.newaxis,2]
# print(myDataset_X)

# myDataset.isnull().sum()
# myDataset.info()
# myDataset.describe()
# myDataset.head()

# print(myDataset.values[:,1:3])
# print(myDataset.values[:,3:29])

# Separating the target variable
X = myDataset.values[1:5, 3:29]
Y = myDataset.values[1:5, 1]

# print(X)
print(Y)

# print("X",Y)
# Splitting the dataset into train and test	
# testSize = 30% train = 70%

X_train, X_test, Y_train, Y_test = train_test_split(
X, Y, test_size = 0.3, random_state = 100)

print("Test")
print(X_test)
print(Y_test)

model = linear_model.LinearRegression()
model.fit(X_train,Y_train)

Y_predicted = model.predict(X_test)

print("Mean squared error is: ", mean_squared_error(Y_test, Y_predicted))

print(X_test.shape, Y_test.shape)

fig, ax = plt.subplots()

for i, val in enumerate(Y_test):
    ax.scatter(X_test[i,:],[val]*26)
plt.show()
# plt.scatter(X_test[0], Y_test[0])
# # plt.plot(X_test[0], Y_predicted[0])
# plt.show()













import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn import datasets,linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import  mean_squared_error


# importing database
myDataset = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00374/energydata_complete.csv",
sep= ',', header = None)
# print(myDataset)

# Separating the target variable
X = myDataset.values[1:5, 3:29]
Y = myDataset.values[1:5, 1]

# Splitting the dataset into train and test	
# testSize = 30% train = 70%
X_train, X_test, Y_train, Y_test = train_test_split(
X, Y, test_size = 0.3, random_state = 100)

print("Test")
print(X_test)
print(Y_test)

model = linear_model.LinearRegression()
model.fit(X_train,Y_train)

Y_predicted = model.predict(X_test)

print("Mean squared error is: ", mean_squared_error(Y_test, Y_predicted))

plt.scatter(X_test[0], Y_test[0])
# plt.plot(X_test[0], Y_predicted[0])
plt.show()
